// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto_file.proto

//это название озночает что в этом файле хранятся все нужные сервисы и сообщения

package protoYLMS

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalService_PushTasks_FullMethodName = "/global.InternalService/PushTasks"
)

// InternalServiceClient is the client API for InternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalServiceClient interface {
	PushTasks(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type internalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalServiceClient(cc grpc.ClientConnInterface) InternalServiceClient {
	return &internalServiceClient{cc}
}

func (c *internalServiceClient) PushTasks(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InternalService_PushTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServiceServer is the server API for InternalService service.
// All implementations must embed UnimplementedInternalServiceServer
// for forward compatibility.
type InternalServiceServer interface {
	PushTasks(context.Context, *ListTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInternalServiceServer()
}

// UnimplementedInternalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalServiceServer struct{}

func (UnimplementedInternalServiceServer) PushTasks(context.Context, *ListTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTasks not implemented")
}
func (UnimplementedInternalServiceServer) mustEmbedUnimplementedInternalServiceServer() {}
func (UnimplementedInternalServiceServer) testEmbeddedByValue()                         {}

// UnsafeInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalServiceServer will
// result in compilation errors.
type UnsafeInternalServiceServer interface {
	mustEmbedUnimplementedInternalServiceServer()
}

func RegisterInternalServiceServer(s grpc.ServiceRegistrar, srv InternalServiceServer) {
	// If the following call pancis, it indicates UnimplementedInternalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalService_ServiceDesc, srv)
}

func _InternalService_PushTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).PushTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalService_PushTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).PushTasks(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalService_ServiceDesc is the grpc.ServiceDesc for InternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "global.InternalService",
	HandlerType: (*InternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushTasks",
			Handler:    _InternalService_PushTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_file.proto",
}

const (
	TaskService_GetTask_FullMethodName  = "/global.TaskService/GetTask"
	TaskService_PushTask_FullMethodName = "/global.TaskService/PushTask"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	GetTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TaskRequest, error)
	PushTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TaskRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskRequest)
	err := c.cc.Invoke(ctx, TaskService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PushTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskService_PushTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
type TaskServiceServer interface {
	GetTask(context.Context, *emptypb.Empty) (*TaskRequest, error)
	PushTask(context.Context, *TaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) GetTask(context.Context, *emptypb.Empty) (*TaskRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceServer) PushTask(context.Context, *TaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTask not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PushTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PushTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_PushTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PushTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "global.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "PushTask",
			Handler:    _TaskService_PushTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_file.proto",
}

const (
	ProcessedExpressionsService_PushNewProcessedExpression_FullMethodName = "/global.ProcessedExpressionsService/PushNewProcessedExpression"
	ProcessedExpressionsService_GetAllProcessedExpressions_FullMethodName = "/global.ProcessedExpressionsService/GetAllProcessedExpressions"
)

// ProcessedExpressionsServiceClient is the client API for ProcessedExpressionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessedExpressionsServiceClient interface {
	PushNewProcessedExpression(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllProcessedExpressions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProcesedExpressionRequest, error)
}

type processedExpressionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessedExpressionsServiceClient(cc grpc.ClientConnInterface) ProcessedExpressionsServiceClient {
	return &processedExpressionsServiceClient{cc}
}

func (c *processedExpressionsServiceClient) PushNewProcessedExpression(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProcessedExpressionsService_PushNewProcessedExpression_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processedExpressionsServiceClient) GetAllProcessedExpressions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProcesedExpressionRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProcesedExpressionRequest)
	err := c.cc.Invoke(ctx, ProcessedExpressionsService_GetAllProcessedExpressions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessedExpressionsServiceServer is the server API for ProcessedExpressionsService service.
// All implementations must embed UnimplementedProcessedExpressionsServiceServer
// for forward compatibility.
type ProcessedExpressionsServiceServer interface {
	PushNewProcessedExpression(context.Context, *ResultRequest) (*emptypb.Empty, error)
	GetAllProcessedExpressions(context.Context, *emptypb.Empty) (*ListProcesedExpressionRequest, error)
	mustEmbedUnimplementedProcessedExpressionsServiceServer()
}

// UnimplementedProcessedExpressionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProcessedExpressionsServiceServer struct{}

func (UnimplementedProcessedExpressionsServiceServer) PushNewProcessedExpression(context.Context, *ResultRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNewProcessedExpression not implemented")
}
func (UnimplementedProcessedExpressionsServiceServer) GetAllProcessedExpressions(context.Context, *emptypb.Empty) (*ListProcesedExpressionRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProcessedExpressions not implemented")
}
func (UnimplementedProcessedExpressionsServiceServer) mustEmbedUnimplementedProcessedExpressionsServiceServer() {
}
func (UnimplementedProcessedExpressionsServiceServer) testEmbeddedByValue() {}

// UnsafeProcessedExpressionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessedExpressionsServiceServer will
// result in compilation errors.
type UnsafeProcessedExpressionsServiceServer interface {
	mustEmbedUnimplementedProcessedExpressionsServiceServer()
}

func RegisterProcessedExpressionsServiceServer(s grpc.ServiceRegistrar, srv ProcessedExpressionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedProcessedExpressionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProcessedExpressionsService_ServiceDesc, srv)
}

func _ProcessedExpressionsService_PushNewProcessedExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessedExpressionsServiceServer).PushNewProcessedExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessedExpressionsService_PushNewProcessedExpression_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessedExpressionsServiceServer).PushNewProcessedExpression(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessedExpressionsService_GetAllProcessedExpressions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessedExpressionsServiceServer).GetAllProcessedExpressions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessedExpressionsService_GetAllProcessedExpressions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessedExpressionsServiceServer).GetAllProcessedExpressions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessedExpressionsService_ServiceDesc is the grpc.ServiceDesc for ProcessedExpressionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessedExpressionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "global.ProcessedExpressionsService",
	HandlerType: (*ProcessedExpressionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushNewProcessedExpression",
			Handler:    _ProcessedExpressionsService_PushNewProcessedExpression_Handler,
		},
		{
			MethodName: "GetAllProcessedExpressions",
			Handler:    _ProcessedExpressionsService_GetAllProcessedExpressions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_file.proto",
}
